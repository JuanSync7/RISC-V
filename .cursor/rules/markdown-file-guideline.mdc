---
description: This is a markdown file guideline to help assist an agent create markdown files when requested by the user
globs: 
alwaysApply: false
---
# Rule: markdown-documentation-style-with-tasks

## Purpose
To ensure all markdown documentation generated by the AI is clear, consistent, actionable, and suitable for technical project documentation, with a focus on task-based progress tracking.

---

## Request Clarification

**Before creating any markdown file, clarify the intended purpose:**

When a user requests a markdown file, determine the specific purpose from these common use cases:

- **Agent Guidance**: A task-based file for an agent to understand and execute project implementation
- **Technical Documentation**: Information about files, directories, or technical specifications
- **Troubleshooting Guide**: Previous issues, solutions, and common problems
- **Project Summary**: Overview of project/directory structure and purpose
- **Implementation Plan**: Roadmap, phases, and execution strategy
- **User Guide**: Instructions for end users or developers
- **Summary Report**: Condensed information about specific items or topics
- **Template/Skeleton**: Structure format for agents or teams to follow
- **Rule Deck/System Prompt**: Guidelines, rules, or system instructions

**Ask clarifying questions if the purpose is unclear:**
- What is the primary audience for this document?
- Is this for immediate action or reference?
- Should it include task checklists or just information?
- What level of detail is needed?

---

## Structure

1. **Title**
   - Use a top-level heading (`#`) that clearly states the document's subject.

2. **Overview / Executive Summary**
   - Begin with a concise summary of the document's purpose and scope.

3. **Table of Contents** (if the document is long)
   - Use a bulleted list with anchor links to major sections.

4. **Task Checklist**
   - Use a markdown task list for all actionable items, milestones, or steps.
   - Tasks should be specific, actionable, and checkable.
   - Example:
     ```markdown
     ## Task Checklist
     - [ ] Define requirements
     - [ ] Design architecture
     - [ ] Implement feature X
     - [ ] Write tests for feature X
     - [ ] Review and validate
     ```
   - As tasks are completed, mark them as `[x]`.

5. **Section Headings**
   - Use clear, hierarchical headings (`##`, `###`, etc.) for each major topic or phase.
   - Example sections: **(Not exhaustive list)**
     - Current State
     - Implementation Details
     - Plan / Roadmap
     - Risks and Mitigations
     - Performance Targets
     - Testing and Validation
     - Migration/Upgrade Path
     - Conclusion / Next Steps

6. **Bulleted and Numbered Lists**
   - Use lists for features, steps, or key points for clarity.

7. **Tables**
   - Use markdown tables for comparisons, timelines, or matrices.

8. **Code Blocks**
   - Use fenced code blocks (with language tags if appropriate) for code/configuration examples.

9. **Emphasis and Callouts**
   - Use bold or italics for emphasis.
   - Use blockquotes for important notes or warnings.

10. **Links**
    - Use markdown links for cross-references to other documents or external resources.

11. **Metadata**
    - At the end, include document version, last updated date, author, and status.

---

## Style

- Use concise, technical language.
- Prefer active voice and direct instructions.
- Use consistent terminology and formatting.
- Add comments in code blocks for clarity.
- Ensure all sections are relevant to the document's purpose.
- Keep task descriptions actionable and clear.

---

## Version Control Guidelines

**Document History**
- Use semantic versioning (MAJOR.MINOR.PATCH)
- Include a changelog section at the bottom
- Tag significant document versions
- Keep one change per commit with clear messages
- Document breaking changes prominently

---

## Quality Principles

**Content First, Format Second**
- Prioritize accuracy, completeness, and usefulness over rigid adherence to format
- If a section doesn't apply to the specific document, omit it rather than forcing irrelevant content
- Adapt the structure to fit the content, not the other way around

**Accuracy Over Completeness**
- It's better to have fewer, accurate tasks than many speculative ones
- If information is uncertain, mark it as such rather than making assumptions
- Use "TBD" or "To be determined" for incomplete information rather than guessing

**Contextual Relevance**
- Only include sections that add value to the specific document
- Customize the structure based on the document's purpose and audience
- Consider the document's lifecycle and update frequency

---

## Flexibility Guidelines

**When to Deviate from the Template**
- If the document is very short (< 500 words), a simplified structure may be more appropriate
- For highly technical specifications, focus on technical accuracy over task tracking
- For status reports, emphasize current state over future planning
- For troubleshooting guides, prioritize step-by-step instructions over task lists

**Adaptive Section Usage**
- **Always Required**: Title, Overview, and at least one relevant section
- **Conditionally Required**: Task Checklist (only if there are actual tasks to track)
- **Optional**: Table of Contents (for documents > 1000 words), specific sections based on content type

**Content Validation**
- Before finalizing, verify that each section contains meaningful, accurate information
- Remove any sections that were added just to follow the template but contain no valuable content
- Ensure the document serves its intended purpose for the target audience

**Balancing Structure and Substance**
- Use the structure as a guide, not a constraint
- If a different organization would better serve the content, use it
- Maintain consistency within the document, even if it differs from the template

---

## Example Skeleton

```markdown
# [Document Title]

## Overview
Brief summary of what this document covers.

## Table of Contents
- [Task Checklist](#task-checklist)
- [Current State](#current-state)
- [Implementation](#implementation)
- [Plan](#plan)
- [Risks and Mitigations](#risks-and-mitigations)
- [Performance Targets](#performance-targets)
- [Testing and Validation](#testing-and-validation)
- [Conclusion](#conclusion)

## Task Checklist
- [ ] Define requirements
- [ ] Design architecture
- [ ] Implement feature X
- [ ] Write tests for feature X
- [ ] Review and validate

## Current State
Describe the current implementation, features, and limitations.

## Implementation
Technical details, architecture diagrams, code snippets, etc.

## Plan
Roadmap, phases, milestones, and timelines.

## Risks and Mitigations
| Risk | Mitigation |
|------|------------|
| Example risk | Example mitigation |

## Performance Targets
List of quantitative and qualitative goals.

## Testing and Validation
Testing strategy, coverage, and validation methods.

## Conclusion
Summary and next steps.

---

**Document Version:** 1.0  
**Last Updated:** YYYY-MM-DD  
**Author:** [Name or Team]  
**Status:** [Draft/Final/Review]
```

---

## Usage

When requesting a markdown file, specify the topic and reference this rule (e.g., "Write a markdown file for the implementation plan using the markdown-documentation-style-with-tasks rule").  
As the agent completes tasks, the checklist will be updated and marked as done.

**Remember**: This template is a starting point. Adapt it to serve the content and purpose of your specific document while maintaining the core principles of clarity, accuracy, and usefulness.

---

## Optional Enhancements

- Add a "Progress" section with a percentage or visual bar.
- For large projects, break down the checklist into subtasks under each major section.
- Add a "Blocked/Dependencies" section for tasks that cannot proceed until others are done.

---

**End of Rule**








