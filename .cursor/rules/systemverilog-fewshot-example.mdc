Systemverilog few shot example for proper systemverilog coding practices

//=============================================================================
// Company: Sondrel Ltd
// Project Name: AES_GCM
//
// File: debounce.sv
//
// ----- Fields for Automated Documentation -----
// MODULE_NAME: debounce
// AUTHOR: DesignAI Example Generator (example@company.com)
// VERSION: 1.0.0
// DATE: 2025-05-25
// DESCRIPTION: A simple push-button debouncer that generates a single-cycle pulse.
// PRIMARY_PURPOSE: To filter out mechanical noise from a push-button or switch input.
// ROLE_IN_SYSTEM: A utility module to provide clean, reliable digital inputs from noisy sources.
// PROBLEM_SOLVED: Prevents multiple state transitions from a single physical button press.
// MODULE_TYPE: RTL
// TARGET_TECHNOLOGY_PREF: ASIC/FPGA
// RELATED_SPECIFICATION: N/A
//
// ----- Status and Tracking -----
// VERIFICATION_STATUS: Not Verified
// QUALITY_STATUS: Draft
//
//=============================================================================

`timescale 1ns/1ps
`default_nettype none

module debounce #(
    // Configurable Parameters
    parameter integer CONFIG_CLOCK_FREQ_HZ   = 50_000_000, // AI_TAG: PARAM_DESC - Frequency of the input clock in Hz.
                                                         // AI_TAG: PARAM_USAGE - Used to calculate the debounce counter limit.
                                                         // AI_TAG: PARAM_CONSTRAINTS - Must be greater than 0.
    parameter integer CONFIG_DEBOUNCE_TIME_MS = 20         // AI_TAG: PARAM_DESC - Desired debounce settling time in milliseconds.
                                                         // AI_TAG: PARAM_USAGE - Determines how long the input must be stable.
                                                         // AI_TAG: PARAM_CONSTRAINTS - Recommended range is 5-50ms.
) (
    // Clock and Reset
    input  logic clk_i,   // AI_TAG: PORT_DESC - System clock.
                         // AI_TAG: PORT_CLK_DOMAIN - clk_i
    input  logic rst_ni,  // AI_TAG: PORT_DESC - Asynchronous active-low reset.
                         // AI_TAG: PORT_CLK_DOMAIN - clk_i (async assert)

    // IO
    input  logic button_in_i,   // AI_TAG: PORT_DESC - Noisy input from a physical button (active-high).
                               // AI_TAG: PORT_CLK_DOMAIN - clk_i (asynchronous to clock edges)
    output logic pulse_out_o    // AI_TAG: PORT_DESC - Clean, single-cycle pulse output for each button press.
                               // AI_TAG: PORT_CLK_DOMAIN - clk_i
                               // AI_TAG: PORT_DEFAULT_STATE - 1'b0
);

    // ----- Local Parameters -----
    // Calculate the number of clock cycles required to meet the debounce time.
    localparam LP_COUNTER_LIMIT = (CONFIG_CLOCK_FREQ_HZ / 1000) * CONFIG_DEBOUNCE_TIME_MS;
    localparam LP_COUNTER_WIDTH = $clog2(LP_COUNTER_LIMIT);

    // ----- FSM State Definition -----
    typedef enum logic [1:0] {
        S_IDLE,         // Waiting for button press
        S_WAIT_STABLE,  // Button pressed, waiting for debounce time
        S_PULSE,        // Output a single-cycle pulse
        S_WAIT_RELEASE  // Wait for button to be released before re-arming
    } state_e;

    // ----- Internal Signal Declarations -----
    state_e state_r, state_ns;
    logic [LP_COUNTER_WIDTH-1:0] counter_r, counter_ns;
    logic counter_en_c;
    logic counter_max_c;
    logic clear_counter_c;


    // ----- Sequential Logic (Registers) -----
    always_ff @(posedge clk_i or negedge rst_ni) begin : proc_state_reg
        if (!rst_ni) begin
            state_r <= S_IDLE;
            counter_r <= '0;
        end else begin
            state_r <= state_ns;
            counter_r <= counter_ns;
        end
    end

    // ----- Combinational Logic -----

    // Counter Logic
    assign counter_max_c = (counter_r == LP_COUNTER_LIMIT - 1);

    always_comb begin : proc_counter_logic
        counter_ns = counter_r; // Default assignment
        if (clear_counter_c) begin
            counter_ns = '0;
        end else if (counter_en_c) begin
            counter_ns = counter_r + 1;
        end
    end

    // FSM Next-State and Output Logic
    always_comb begin : proc_fsm_next_state
        // Default assignments to prevent latches
        state_ns        = state_r;
        pulse_out_o     = 1'b0;
        counter_en_c    = 1'b0;
        clear_counter_c = 1'b0;

        case (state_r)
            S_IDLE: begin
                // If button is pressed, start the debounce counter
                if (button_in_i) begin
                    state_ns     = S_WAIT_STABLE;
                    counter_en_c = 1'b1;
                end
            end

            S_WAIT_STABLE: begin
                // If button is released during wait, it was noise, so go back to idle
                if (!button_in_i) begin
                    state_ns        = S_IDLE;
                    clear_counter_c = 1'b1;
                // If button remains pressed for the full debounce period
                end else if (counter_max_c) begin
                    state_ns = S_PULSE;
                // Otherwise, keep counting
                end else begin
                    counter_en_c = 1'b1;
                end
            end

            S_PULSE: begin
                // Output a single-cycle pulse
                pulse_out_o = 1'b1;
                // Immediately move to the next state to ensure a single-cycle pulse
                state_ns = S_WAIT_RELEASE;
            end

            S_WAIT_RELEASE: begin
                // Wait for the button to be released before we can re-arm
                if (!button_in_i) begin
                    state_ns = S_IDLE;
                end
            end

            default: begin
                // Safe state recovery
                state_ns = S_IDLE;
            end
        endcase
    end

    // ----- Assertions -----
    // AI_TAG: ASSERTION - Ensures the output pulse is never more than one cycle long.
    // AI_TAG: ASSERTION_TYPE - Both
    // AI_TAG: ASSERTION_SEVERITY - Error
    OneCyclePulseAssert: assert property (
        @(posedge clk_i) disable iff (!rst_ni) (pulse_out_o |=> !pulse_out_o)
    );

    //----- AI Tags For Documentation -----
    // AI_TAG: FEATURE - Filters noisy button inputs to produce a clean, single-cycle pulse.
    // AI_TAG: FEATURE - Debounce time is configurable via parameters.
    //
    // AI_TAG: INTERNAL_BLOCK - Debounce FSM - Controls the debouncing logic flow.
    // AI_TAG: INTERNAL_BLOCK - Debounce Counter - Measures the stable time of the input signal.
    //
    // AI_TAG: CLOCK_SOURCE - clk_i - Main system clock provided externally.
    // AI_TAG: CLOCK_FREQUENCY_TARGET - clk_i - 50 MHz (default, configurable).
    // AI_TAG: RESET_STRATEGY_NOTE - rst_ni is a standard asynchronous active-low reset.
    //
    // AI_TAG: FSM_NAME - state_r
    // AI_TAG: FSM_PURPOSE - state_r - Manages the debouncing sequence from detection to pulse generation.
    // AI_TAG: FSM_ENCODING - state_r - binary
    // AI_TAG: FSM_RESET_STATE - state_r - S_IDLE
    // AI_TAG: FSM_STATE - S_IDLE - Waiting for a button press.
    // AI_TAG: FSM_STATE - S_WAIT_STABLE - Waiting for the input signal to be stable for the configured debounce time.
    // AI_TAG: FSM_STATE - S_PULSE - Generating the single-cycle output pulse.
    // AI_TAG: FSM_STATE - S_WAIT_RELEASE - Waiting for the button to be released before re-arming.
    //
    // AI_TAG: SYNTHESIS_NOTE - This is a small, self-contained module with no complex timing paths.
    // AI_TAG: VERIF_SCENARIO_KEY - Test with button presses shorter, equal to, and longer than the debounce time.
    // AI_TAG: VERIF_SCENARIO_KEY - Test with noisy button input that toggles multiple times during the debounce window.
    // AI_TAG: VERIF_SCENARIO_KEY - Test reset assertion during each FSM state.

endmodule : debounce

//=============================================================================
// Dependencies: None
//
// Performance:
//   - Critical Path: FSM combinational logic
//   - Max Frequency: > 400 MHz (logic is simple)
//   - Area: < 100 gates
//
// Verification Coverage:
//   - Code Coverage: TBD
//   - Functional Coverage: TBD
//   - Branch Coverage: TBD
//
// Synthesis:
//   - Target Technology: ASIC/FPGA
//   - Synthesis Tool: Any
//   - Clock Domains: 1
//   - Constraints File: debounce.sdc
//
// Testing:
//   - Testbench: debounce_tb.sv
//   - Test Vectors: TBD
//
//----
// Revision History:
// Version | Date       | Author                       | Description
//=============================================================================
// 1.0.0   | 2025-05-25 | DesignAI Example Generator   | Initial release.
//=============================================================================

---
# Module Design Document: debounce

**Version:** 1.0.0
**Source File(s):** `debounce.sv`
**Author:** DesignAI Example Generator (example@company.com)
**Generated On:** 2025-05-25
**Module Type:** RTL
**Target Technology Preference:** ASIC/FPGA
**Related Specification(s):** N/A
**Verification Status:** Not Verified
**Quality Status:** Draft

## 1. Overview

This module is a simple push-button debouncer that generates a single-cycle pulse. Its primary purpose is to filter out mechanical noise from a push-button or switch input, providing a clean, reliable digital signal for downstream logic. It solves the common problem of a single physical button press causing multiple unintended transitions in a digital system.

## 2. See Also: Other Design Pattern Examples

For more advanced or specialized design patterns, refer to the other examples available in the `.cursor/rules` directory. These examples provide complete SystemVerilog code and documentation for common hardware modules.

*   **CRC (Cyclic Redundancy Check):**
    *   **File:** `systemverilog-crc-example.mdc`
    *   **Description:** Implements a CRC generator/checker, essential for data integrity in communication systems.

*   **Lockstep Core:**
    *   **File:** `systemverilog-lockstep-example.mdc`
    *   **Description:** Demonstrates a dual-core lockstep mechanism to detect and report faults by comparing outputs, critical for safety-related applications.

*   **Safety Mechanisms:**
    *   **File:** `systemverilog-safety-example.mdc`
    *   **Description:** Provides examples of various safety features commonly found in safety-critical SoCs.

*   **Triple Modular Redundancy (TMR):**
    *   **File:** `systemverilog-tmr-example.mdc`
    *   **Description:** Shows how to implement TMR, a fault-tolerance technique that masks single-point failures by triplicating logic and using a voter.

*   **Watchdog Timer:**
    *   **File:** `systemverilog-watchdog-example.mdc`
    *   **Description:** An implementation of a watchdog timer to recover a system from software hangs or hardware faults.

## 3. Key Features

* Filters noisy button inputs to produce a clean, single-pulse output.
* Configurable debounce time via parameters.
* Implemented as a simple, robust Finite State Machine (FSM).
* Low resource utilization.

## 4. Block Diagram

**Textual Representation:**
`
  +-------------------------------------------------+
  | debounce                                        |
  |                                                 |
  |   Inputs:                                       |
  |     - clk_i                                     |
  |     - rst_ni                                    |
  |     - button_in_i (Noisy)                       |
  |                                                 |
  |   Outputs:                                      |
  |     - pulse_out_o (Clean, 1-cycle pulse)        |
  |                                                 |
  |   Internal Logic:                               |
  |     - Debounce FSM                              |
  |     - Stability Counter                         |
  |                                                 |
  +-------------------------------------------------+
`

## 5. Parameters

| Parameter Name            | Type    | Default Value | Description                                  | Usage                                              | Constraints                          |
| ------------------------- | ------- | ------------- | -------------------------------------------- | -------------------------------------------------- | ------------------------------------ |
| `CONFIG_CLOCK_FREQ_HZ`    | `integer` | `50_000_000`  | Frequency of the input clock in Hz.          | Used to calculate the debounce counter limit.      | Must be greater than 0.              |
| `CONFIG_DEBOUNCE_TIME_MS` | `integer` | `20`          | Desired debounce settling time in milliseconds. | Determines how long the input must be stable.      | Recommended range is 5-50ms.         |

## 6. Ports

| Port Name     | Dir.   | Type / Width | Clock Domain         | Default State | Description                                                      |
| ------------- | ------ | ------------ | -------------------- | ------------- | ---------------------------------------------------------------- |
| `clk_i`       | input  | `logic`      | `clk_i`              | N/A           | System clock.                                                    |
| `rst_ni`      | input  | `logic`      | `clk_i` (async assert) | N/A           | Asynchronous active-low reset.                                   |
| `button_in_i` | input  | `logic`      | `clk_i` (asynchronous) | N/A           | Noisy input from a physical button (active-high).                |
| `pulse_out_o` | output | `logic`      | `clk_i`              | `1'b0`        | Clean, single-cycle pulse output for each button press.          |

## 7. Internal Architecture / Design Details

### 7.1. Clocking and Reset

*   **Clock Domain:** The entire module operates in a single clock domain, `clk_i`.
*   **Reset Strategy:** The module uses an active-low asynchronous reset, `rst_ni`. Logic is reset when `rst_ni` is low.

### 7.2. Finite State Machine (FSM)

The core of the module is a 4-state FSM that controls the debouncing logic.

*   **FSM States:**
    *   `S_IDLE`: The default state, waiting for the `button_in_i` signal to go high.
    *   `S_WAIT_STABLE`: Entered when a button press is detected. The FSM waits here for the duration of the debounce period, controlled by an internal counter. If the button is released during this time, it's considered noise, and the FSM returns to `S_IDLE`.
    *   `S_PULSE`: Entered after the debounce time has elapsed and the button has remained asserted. In this state, `pulse_out_o` is asserted for a single clock cycle.
    *   `S_WAIT_RELEASE`: After generating a pulse, the FSM waits in this state until the button is released to prevent generating multiple pulses for a single long press.

*   **State Transition Diagram:**

    `mermaid
    graph TD
        S_IDLE -- button_in_i --> S_WAIT_STABLE;
        S_WAIT_STABLE -- !button_in_i (noise) --> S_IDLE;
        S_WAIT_STABLE -- button_in_i & counter_max --> S_PULSE;
        S_PULSE -- (immediate) --> S_WAIT_RELEASE;
        S_WAIT_RELEASE -- !button_in_i --> S_IDLE;
    `

## 8. Assertions

*   `OneCyclePulseAssert`: Ensures the `pulse_out_o` signal is asserted for no more than one consecutive clock cycle, guaranteeing a clean single-pulse output.

## 9. Synthesis and Implementation

*   **Resource Usage:** The module is very lightweight. On most FPGAs or in an ASIC, it will synthesize to a small number of logic cells (LUTs and flip-flops).
*   **Critical Path:** The critical path is the combinational logic for the FSM's next-state calculation. Given its simplicity, it is not expected to be a timing concern in any typical design.

| Version | Date       | Author                       | Changes                                       |
|---|---|---|-----|
| 1.0.0   | 2025-05-24 | DesignAI Example Generator   | Initial auto-generation from RTL and AI_TAGS. |
| ...     |            |                              |                                               |